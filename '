use macroquad::prelude::*;

use macroquad::ui::{
    hash, root_ui,
    widgets::{self, Group},
    Drag, Ui,
};

const DUNGEON_RECT_SIZE: f32 = 20.;

struct Dungeon {
    x: f32,
    y: f32,
}

impl Dungeon {
    pub fn draw(&self) {
        draw_rectangle(self.x, self.y, self.x + DUNGEON_RECT_SIZE, self.y + DUNGEON_RECT_SIZE, BLACK);
    }
}


#[macroquad::main("BasicShapes")]
async fn main() {
    
    let mut dungeon_size = 0.;
    let drawing_start = (10., 10.);
    let dungeon_drawing_size = 30;
    let mut dungeon = Vec::new(); 
    loop {
        clear_background(RED);

        widgets::Window::new(hash!(), vec2(40., 50.), vec2(300., 100.))
            .label("Dungeon Size")
            .ui(&mut *root_ui(), |ui| {
                ui.slider(hash!(), "[0 .. 30]", 0f32..30f32, &mut dungeon_size);
            });
        dungeon_size = dungeon_size.round();

        for i in 0u32..dungeon_size as u32 {
            for j in 0u32..dungeon_size as u32 {
                dungeon.push(Dungeon{x: i as f32 + drawing_start.0, y: j as f32 + drawing_start.1}) 
            }
        }

        for room in dungeon {
            room.draw();
        }
        next_frame().await
    }
}
